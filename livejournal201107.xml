<?xml version="1.0" encoding="UTF-8"?>
<livejournal>
<entry>
<itemid>2517</itemid>
<eventtime>2011-07-26 10:03:00</eventtime>
<logtime>2011-07-26 08:03:08</logtime>
<subject>gbuild: To boldly go where no build system has gone before ...</subject>
<event>&lt;blockquote&gt;      &lt;p&gt;&lt;i&gt;This is the first post in a short series of blog&amp;nbsp;posts about the new GNU  make based build system that will soon be integrated into the DEV300  codeline. It is covering the memory usage of the new GNU make build  system when using full dependencies.&lt;/i&gt;&lt;/p&gt;    &lt;/blockquote&gt;    &lt;p&gt;Since the &lt;a href="http://192.9.162.56/GullFOSS/entry/building_openoffice_org_with_gnu"&gt;first announcement&lt;/a&gt;  of plans to replace the old build.pl/dmake build system with a new  solution, one of the focus points was the correct handling of  dependencies. To handle this problem correctly, multiple approaches have  been tried and one was to have all dependencies in one process because &lt;a href="http://miller.emu.id.au/pmiller/books/rmch/"&gt;recursive make is considered harmful&lt;/a&gt;. As the &lt;a href="http://hg.services.openoffice.org/cws/gnumake2"&gt;gnumake2 cws&lt;/a&gt;  is finally approaching the final status in the lifecycle of a feature  branch (being &amp;quot;ready for QA&amp;quot; until &amp;quot;integrated&amp;quot;), it is time to address  one of the main concerns reported by community members about it: memory  usage.&lt;/p&gt;    &lt;p&gt;The very idea of having all information about an OpenOffice.org  build in one process -- including all dependencies -- might sound  obnoxious and  megalomaniac at first. But in general, memory got cheap in recent years  and it was the time to at least consider this option.&lt;/p&gt;    &lt;p&gt;By now, we can say it was well worth it: gnumake2 is now capable of  building eight modules (framework, sfx2, svl, svtools, sw, toolkit,  tools, xmloff) in one process, and we have a solid base to approximate  the memory usage of a build that contains all dependencies in one  process.&lt;/p&gt;    &lt;p&gt;First we have to find a reasonable metric of &amp;quot;dependency-intensity&amp;quot;  of a part of the build. Then we can try to relate that metric to the  memory usage measured on migrated modules to extrapolate to a full  build.&lt;/p&gt;    &lt;p&gt;A simple metric is the number on #include-statements in hxx- and  cxx-files. (That might be a very na&amp;iuml;ve assumption, but I have spent too  much lifetime in the physics department of a university to be scared of a  &lt;a href="http://en.wikipedia.org/wiki/Spherical_cow"&gt;spherical cow&lt;/a&gt;.)&lt;/p&gt;    &lt;p&gt;To measure the memory usage two methods have been used:&lt;/p&gt;    &lt;ol&gt;&lt;li&gt;Adding &lt;font size="4" face="courier new,courier,monospace"&gt;$(info finished parsing.) $(shell sleep 60)&lt;/font&gt; to the end of the main makefile allowed me to measure the heap size of a real make process with &lt;font size="4" face="courier new,courier,monospace"&gt;pmap -d $(ps -a|grep make|cut -f1 -d\ )|egrep -o writeable/private:.[0-9]+K|cut -f 2 -d\ &lt;/font&gt;on Linux 64-Bit.&lt;/li&gt;&lt;li&gt;&lt;a href="http://valgrind.org/docs/manual/ms-manual.html"&gt;valgrinds massif&lt;/a&gt; provided a simple, but synthetic way to do the same (using useful-heap as a measure).&lt;/li&gt;&lt;/ol&gt;    &lt;table cellspacing="0" cellpadding="1" border="0" style="width: 100%; display: table;" class=" htmtableborders"&gt;      &lt;tbody&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(102, 102, 153);"&gt;&amp;nbsp;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(102, 102, 153);"&gt;&amp;nbsp;include statements&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(102, 102, 153);"&gt;pmap (KiB)&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(102, 102, 153);"&gt;&amp;nbsp;massif (KiB)&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&amp;nbsp;no module&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;0&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;632&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 407&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&amp;nbsp;tools&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;964&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;1184&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 1115&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&amp;nbsp;svl&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;1652&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;1660&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 1645&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&amp;nbsp;toolkit&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;2276&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;3524&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 3210&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&amp;nbsp;svtools&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;3768&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;5548&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 5179&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&amp;nbsp;framework&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;6049&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;5188&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 4812&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&amp;nbsp;sfx2&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;6065&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;6196&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 5961&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&amp;nbsp;xmloff&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;6496&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;6860&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 6582&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&amp;nbsp;framework, sfx2&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;12514&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;10276&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 9276&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&amp;nbsp;sw&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;24087&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;29340&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 25943&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&amp;nbsp;all migrated but sw&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;27670&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;23124&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 21145&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&amp;nbsp;all migrated but xmloff, sfx2&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;38796&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;40088&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 35550&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&amp;nbsp;all migrated&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;51757&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt;&amp;nbsp;50812&lt;/font&gt;&lt;/td&gt;          &lt;td align="right" style="width: 25%; background-color: rgb(153, 153, 204);"&gt;&lt;font size="4" face="courier new,courier,monospace"&gt; 45129&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;        &lt;/tr&gt;      &lt;/tbody&gt;    &lt;/table&gt;    &lt;p&gt;&amp;nbsp;&lt;/p&gt;    &lt;p&gt;Using a simple linear regression over the data, OpenOffice.org Calcs &lt;font face="courier new,courier,monospace"&gt;LINEST&lt;/font&gt;  function tells me that one can assume a heap usage of 1010&amp;plusmn;40 bytes per  include for the pmap data and 890&amp;plusmn;35 bytes for the massif data. This  plot show no obvious systematic error in the assumption of the model:&lt;/p&gt;          &lt;p&gt;&lt;img align="middle" src="file:///home/bjoern/Downloads/blog_posts/gbuild_scale_files/Gbuildmem.png" alt="gbuild memory plot" /&gt;&lt;br /&gt;&lt;a href="http://pics.livejournal.com/sweetshark/pic/00005exg/"&gt;&lt;img border="0" align="middle" width="640" height="452" alt="" src="http://pics.livejournal.com/sweetshark/pic/00005exg/s640x480" /&gt;&lt;/a&gt;&lt;/p&gt;      &lt;p&gt;&amp;nbsp;&lt;/p&gt;      &lt;p&gt;The last two data points are the predictions of the model for a full build with and without binfilter:&lt;/p&gt;      &lt;ul&gt;&lt;li&gt;without binfilter: 170-190 MiB (pmap), 150-170 MiB (massif)&lt;/li&gt;&lt;li&gt;with binfilter: 190-210 MiB (pmap), 170-180 MiB (massif)&lt;/li&gt;&lt;/ul&gt;So it can be assumed that a full build with all dependencies  can be handled decently even by slower and smaller hardware as even  common ARM machines have enough RAM to handle this.&lt;br /&gt;      &lt;p&gt;Finishing note: gnumake2 will be integrated soon, so if you are using  actively developing on the DEV300 codeline, it is advisable to check  out the basics of it. A good starting point is the talk &lt;a href="http://www.ooocon.org/index.php/ooocon/2010/paper/view/212"&gt;&amp;quot;Rebooting the OpenOffice.org Build System&amp;quot;&lt;/a&gt; [ &lt;a href="http://wiki.services.openoffice.org/w/images/0/03/RebootingBuild.odp"&gt;ODP&lt;/a&gt; &lt;a href="http://www.ooocon.org/index.php/ooocon/2010/paper/view/212/188"&gt;PDF&lt;/a&gt; &lt;a href="http://users2.ooodev.org/%7Eooocon2010/01_september/FT_309/14.00_bj%f6rn_m_rebooting_the_openoffice.org_build_system.flv"&gt;video&lt;/a&gt; ] I gave at the OOoCon2010. For more detailed information see the &lt;a href="http://wiki.services.openoffice.org/wiki/Build_Environment_Effort"&gt;Build Environment Effort section&lt;/a&gt; at the OOo wiki.&lt;/p&gt;      &lt;p&gt;I hope to keep the posts about the build system coming in the next days. Next up: &lt;a href="http://blogs.sun.com/GullFOSS/entry/gbuild_how_to_migrate_a"&gt;How to migrate a module to gbuild&lt;/a&gt;.&lt;/p&gt;      &lt;p&gt;&amp;nbsp;&lt;/p&gt;      &lt;p&gt;P.S.: In case an interested GNU make hacker comes across this post, here is some output from &lt;font face="courier new,courier,monospace"&gt;make -p&lt;/font&gt; for the 8 migrated modules:&lt;/p&gt;&lt;font face="courier new,courier,monospace"&gt;2385 variable set hash-tables&lt;br /&gt;# files hash-table stats:&lt;br /&gt;# Load=21210/32768=65%, Rehash=5, Collisions=605939/1022290=59%&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;# # of strings in strcache: 32753 / lookups = 991181 / hits = 958428&lt;br /&gt;# # of strcache buffers: 284 (* 8176 B/buffer = 2321984 B)&lt;br /&gt;# strcache used: total = 2313570 (5196) / max = 8176 / min = 8170 / avg = 8175 &lt;br /&gt;# strcache free: total = 238 (2980) / max = 6 / min = 0 / avg = 0&lt;br /&gt;&lt;br /&gt;# strcache hash-table stats:&lt;br /&gt;# Load=32869/65536=50%, Rehash=3, Collisions=545530/1044947=52%&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;(This is a very raw mirror of the original blog post made to blogs.sun.com  16 Nov 2010. As per &lt;a href="http://web.archive.org/web/20090627144253/http://www.sun.com/termsofuse.jsp "&gt;http://web.archive.org/web/20090627144253/http://www.sun.com/termsofuse.jsp &lt;/a&gt; &amp;quot;... You grant Sun and all other users of the Website an irrevocable, worldwide, royalty-free, nonexclusive license to use, reproduce, modify, distribute, transmit, display, perform, adapt, resell and publish such Content (including in digital form) ...&amp;quot; )</event>
<security>public</security>
<allowmask>0</allowmask>
<current_music/>
<current_mood/>
</entry>
<entry>
<itemid>2801</itemid>
<eventtime>2011-07-26 10:16:00</eventtime>
<logtime>2011-07-26 08:16:40</logtime>
<subject>gbuild: How to setup a repository</subject>
<event>&lt;blockquote&gt;      &lt;p&gt;&lt;i&gt;This is the third post in a short series of blog posts about the new GNU  make based build system that will soon be integrated into the DEV300  codeline. It is covering how to use the multi repository support of gbuild.&lt;/i&gt;&lt;/p&gt;    &lt;/blockquote&gt;    &lt;p&gt;Welcome back to the&amp;nbsp;little blog series about the new GNU make build system. &lt;a href="http://192.9.162.56/GullFOSS/entry/gbuild_how_to_migrate_a"&gt;After having covered the setup of a module in the gbuild system in the last post&lt;/a&gt;, this one will be about how repositories are setup with gbuild. A repository in gbuild is a directory where source files are found. While OpenOffice.org currently has every source file in one big repository, gbuild supports to have multiple repositories and will find a file in any of those.&lt;/p&gt;    &lt;h3&gt;Making repositories known to gbuild&lt;/h3&gt;    &lt;p&gt;gbuild needs to be told about the repositories it should look for source files. This is done with the variable &lt;font face="courier new,courier,monospace"&gt;gb_REPOS&lt;/font&gt; which contains a whitespace separated list of source directories. For backwards compatibility, if &lt;font face="courier new,courier,monospace"&gt;gb_REPOS&lt;/font&gt; is not set, &lt;a href="http://hg.services.openoffice.org/cws/gnumake2/file/tip/solenv/gbuild/BuildDirs.mk#l39"&gt;it defaults to &lt;font face="courier new,courier,monospace"&gt;$(SOLARSRC)&lt;/font&gt; for now&lt;/a&gt; (we might get rid of that one day and set &lt;font face="courier new,courier,monospace"&gt;gb_REPOS&lt;/font&gt; in ./configure along with &lt;font face="courier new,courier,monospace"&gt;SOLARSRC&lt;/font&gt;).&lt;/p&gt;    &lt;h3&gt;Setting up a repository for gbuild&lt;/h3&gt;    &lt;p&gt;Three files need to be present in the root of a gbuild repository:&lt;/p&gt;    &lt;ul&gt;&lt;li&gt;&lt;font face="courier new,courier,monospace"&gt;Repository.mk&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="courier new,courier,monospace"&gt;RepositoryFixes.mk&lt;/font&gt;&lt;/li&gt;&lt;li&gt;and &lt;font face="courier new,courier,monospace"&gt;Module_*.mk&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;    &lt;p&gt;In Repository.mk  we define some things that need to be globally known for the build. The  first thing that needs to be globally set is a variable name for this repository, so that we can refer to it -- for example when defining include paths. This is done by a &lt;a href="http://hg.services.openoffice.org/cws/gnumake2/file/tip/Repository.mk#l28"&gt;statement like this&lt;/a&gt;:&lt;/p&gt;    &lt;p&gt;&amp;nbsp;&lt;/p&gt;    &lt;blockquote&gt;      &lt;p style="background-color: rgb(210, 210, 210);"&gt;&lt;font face="courier new,courier,monospace" style="background-color: rgb(210, 210, 210);"&gt;$(eval $(call gb_Helper_register_repository,SRCDIR))&lt;/font&gt;&lt;/p&gt;    &lt;/blockquote&gt;    &lt;p&gt;Because of this statement the OpenOffice.org source repository can be referenced as &lt;font face="courier new,courier,monospace"&gt;$(SRCDIR)&lt;/font&gt; when defining include paths. Other repositories should obviously use a different variable name for their directory.&lt;/p&gt;    &lt;p&gt;In addition, we need to declare the naming scheme and the layer  that libraries and executables end up in the final product. With &lt;a href="http://hg.services.openoffice.org/cws/gnumake2/file/tip/Repository.mk#l41"&gt;the statement&lt;/a&gt;:&lt;/p&gt;    &lt;blockquote style="background-color: rgb(210, 210, 210);"&gt;      &lt;p&gt;&lt;font face="courier new,courier,monospace" style="background-color: rgb(210, 210, 210);"&gt;$(eval $(call&lt;/font&gt;&lt;font face="courier new,courier,monospace"&gt; gb_Helper_register_libraries,OOOLIBS, [...] fwk [...] sw [...] &lt;/font&gt;&lt;font face="courier new,courier,monospace" style="background-color: rgb(210, 210, 210);"&gt;))&lt;/font&gt;&lt;/p&gt;    &lt;/blockquote&gt;    &lt;p&gt;We register the libraries &amp;quot;fwk&amp;quot; and &amp;quot;sw&amp;quot; to be &amp;quot;OOOLIBS&amp;quot;. What this  means exactly depends on the platform, but on Linux 64-Bit for example  it means that the libraries are named &amp;quot;libfwklx.so&amp;quot; and &amp;quot;libswlx.so&amp;quot; and  will end up in the OpenOffice.org layer of the product. This  information needs to be declared globally in the repository and can not be simply declared in the local files in the modules like &lt;font face="courier new,courier,monospace"&gt;framework/Library_fwk.mk&lt;/font&gt;  : When one does a partial build (only one module, e.g. sw) that  information is still needed, because the filenames of the linked-against  libraries need to be known. On OSX, additionally the exact location of  the linked-against library (and thus its layer) needs to be known at  linktime.&lt;/p&gt;    &lt;p&gt;The second file &lt;font face="courier new,courier,monospace"&gt;RepositoryFixes.mk&lt;/font&gt;  is to fix for those cases where developers got too creative for their  own good and followed a naming scheme only mostly: naming it slightly  different on one platform, for example. When gbuild starts up, it parses the &lt;font face="courier new,courier,monospace"&gt;Repository.mk&lt;/font&gt; in each repository.&amp;nbsp; Then it loads the platform defaults and assigns the names and layers according to it. After that the &lt;font face="courier new,courier,monospace"&gt;RepositoryFixes.mk&lt;/font&gt; file in each repository  gets parsed and can fix around &amp;quot;special cases&amp;quot;. It should contain all  the hacks that work around things that break the usual systematics.&lt;/p&gt;    &lt;p&gt;The final file is the &lt;font face="courier new,courier,monospace"&gt;Module_*.mk&lt;/font&gt;. In the case of the OpenOffice.org repository this is the &lt;a href="http://hg.services.openoffice.org/cws/gnumake2/file/tip/Module_ooo.mk"&gt;&lt;font face="courier new,courier,monospace"&gt;Module_ooo.mk&lt;/font&gt;&lt;/a&gt; file. When everything is migrated to gbuild,  one will not build module-by-module, but with one make process. This  make process will finally, after parsing all other setup code, go into  each repository it find in &lt;font face="courier new,courier,monospace"&gt;gb_REPOS&lt;/font&gt; and include the one &lt;font face="courier new,courier,monospace"&gt;Module_*.mk&lt;/font&gt; file it finds there. After parsing those module files, &lt;a href="http://hg.services.openoffice.org/cws/gnumake2/file/tip/GNUmakefile#l35"&gt;the modules in each of those are added as dependencies to the &lt;font face="courier new,courier,monospace"&gt;all&lt;/font&gt; target&lt;/a&gt; -- they need to be built and it turn ensure all modules that are part of it to be built. Gbuild modules can include other modules (yes, you can build &amp;quot;module trees&amp;quot; of arbitrary depth). &lt;font face="courier new,courier,monospace"&gt;Module_ooo.mk&lt;/font&gt; is just a module that includes all migrated modules.&lt;/p&gt;    Ok, enough already of this dry and rather boring topic. The next post will be about &lt;a href="http://192.9.162.56/GullFOSS/entry/gbuild_eyecandy_for_developers"&gt;eyecandy for developers&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;(This is a very raw mirror of the original blog post made to blogs.sun.com  on 23 Nov 2010. As per &lt;a href="http://web.archive.org/web/20090627144253/http://www.sun.com/termsofuse.jsp" rel="nofollow"&gt;http://web.archive.org/web/2009062714425&lt;wbr&gt;&lt;/wbr&gt;3/http://www.sun.com/termsofuse.jsp &lt;/a&gt;  &amp;quot;... You grant Sun and all other users of the Website an irrevocable,  worldwide, royalty-free, nonexclusive license to use, reproduce, modify,  distribute, transmit, display, perform, adapt, resell and publish such  Content (including in digital form) ...&amp;quot; )</event>
<security>public</security>
<allowmask>0</allowmask>
<current_music/>
<current_mood/>
</entry>
<entry>
<itemid>2865</itemid>
<eventtime>2011-07-26 10:24:00</eventtime>
<logtime>2011-07-26 08:24:55</logtime>
<subject>gbuild: Eyecandy for developers</subject>
<event>&lt;blockquote&gt;      &lt;p&gt;&lt;i&gt;This is the fourth post in a short series of blog posts about the new GNU  make based build system that will soon be integrated into the DEV300  codeline. It is covering getting nice output from gbuild.&lt;/i&gt;&lt;/p&gt;    &lt;/blockquote&gt;    &lt;p&gt;Welcome back to the&amp;nbsp;little blog series about the new GNU make build system. After talking about &lt;a href="http://planets.sun.com/GullFOSS/entry/gbuild_how_to_setup_a"&gt;the dry topic of repositories&lt;/a&gt;,  this post is a just a short post about the output of the new build  system. It tries to keep the output calm and clean by default. When you  start a build with:&lt;/p&gt;    &lt;blockquote style="background-color: rgb(210, 210, 210);"&gt;      &lt;p&gt;&lt;font face="courier new,courier,monospace"&gt;make -srj9&lt;/font&gt;&lt;/p&gt;    &lt;/blockquote&gt;    &lt;p&gt;you will get an kbuild-like output:&lt;/p&gt;    &lt;p style="background-color: rgb(210, 210, 210);"&gt;&amp;nbsp;&lt;/p&gt;    &lt;blockquote style="background-color: rgb(210, 210, 210);"&gt;&lt;font face="courier new,courier,monospace" style="background-color: rgb(210, 210, 210);"&gt;[ build CXX ] tools/source/misc/pathutils&lt;/font&gt;&lt;br /&gt;&lt;font face="courier new,courier,monospace" style="background-color: rgb(210, 210, 210);"&gt;[ build LOG ] tools&lt;/font&gt;&lt;br /&gt;&lt;font face="courier new,courier,monospace" style="background-color: rgb(210, 210, 210);"&gt;[ build LNK ] Library/libtllx.so&lt;/font&gt;&lt;br /&gt;&lt;font face="courier new,courier,monospace" style="background-color: rgb(210, 210, 210);"&gt;...&lt;/font&gt;&lt;br /&gt;&lt;font face="courier new,courier,monospace" style="background-color: rgb(210, 210, 210);"&gt;[ build MOD ] tools&lt;/font&gt;&lt;br /&gt;&lt;font face="courier new,courier,monospace" style="background-color: rgb(210, 210, 210);"&gt;[ build ALL ] top level modules: tools&lt;/font&gt;&lt;br /&gt;&lt;font face="courier new,courier,monospace" style="background-color: rgb(210, 210, 210);"&gt;[ build ALL ] loaded modules: tools&lt;/font&gt;&lt;br /&gt;&lt;/blockquote&gt;    &lt;p&gt;A &lt;font face="courier new,courier,monospace"&gt;make clean&lt;/font&gt; command result in the same clean output but with &amp;quot;clean&amp;quot; instead of &amp;quot;build&amp;quot;. When setting some variables:&lt;/p&gt;    &lt;blockquote style="background-color: rgb(210, 210, 210);"&gt;      &lt;p&gt;&lt;font face="courier new,courier,monospace"&gt;export gb_TITLES=T gb_COLOR=T&lt;/font&gt;&lt;/p&gt;    &lt;/blockquote&gt;    &lt;p&gt;The output gets a little more attractive:&lt;br /&gt;&lt;a href="http://pics.livejournal.com/sweetshark/pic/0000665f/"&gt;&lt;img border="0" align="middle" width="640" height="400" alt="" src="http://pics.livejournal.com/sweetshark/pic/0000665f/s640x480" /&gt;&lt;/a&gt;&lt;/p&gt;The left column shows a &lt;font face="courier new,courier,monospace"&gt;make clean&lt;/font&gt;, the middle column a &lt;font face="courier new,courier,monospace"&gt;make/make all&lt;/font&gt; (top: with color, bottom: without color). The &lt;font face="courier new,courier,monospace"&gt;__.oO&lt;/font&gt; and &lt;font face="courier new,courier,monospace"&gt;Xx.__&lt;/font&gt;  ASCII art represent my best attempt at symbolizing a building/cleaning  target. If you have a better idea, give me a note. Please note that the  colored output will also help when using a verbose build as it will  stick out between all the other output and allows easier orientation in  the output. The &lt;font face="courier new,courier,monospace"&gt;gb_TITLES=T&lt;/font&gt; enables that the progress is also shown in the terminal title. Screenshots are not very good at conveying that, unfortunately.    &lt;p&gt;The two terminal windows on the right show some of the verbose error messages that the gbuild  system issues when it deems something wrong. Please note that these  errors are reported early (before starting to really build anything) and  not late (when trying to actually compile/link something that does not  exist).&lt;/p&gt;    &lt;p&gt;Here are a few conditions, that gbuild will try to detect and complain about:&lt;/p&gt;    &lt;ul&gt;&lt;li&gt;initial makefile outside of the source repositories&lt;/li&gt;&lt;li&gt;no call to &lt;font face="courier new,courier,monospace"&gt;gb_Helper_register_repository&lt;/font&gt; in the &lt;font face="courier new,courier,monospace"&gt;Repository.mk&lt;/font&gt;&lt;/li&gt;&lt;li&gt;adding an executable/library to an invalid group in &lt;font face="courier new,courier,monospace"&gt;gb_Helper_register_*&lt;/font&gt; (The error message will report the valid groups.)&lt;/li&gt;&lt;li&gt;corrupted module stacks&lt;/li&gt;&lt;li&gt;adding a object to a library which has no C/C++ source file in any of the repositories&lt;/li&gt;&lt;li&gt;generating a component file which has no source file in any of the repositories&lt;/li&gt;&lt;li&gt;generating resource for which there is no source file in any of the repositories&lt;/li&gt;&lt;li&gt;linking against a library that was not registered in &lt;font face="courier new,courier,monospace"&gt;Repository.mk&lt;/font&gt;&lt;/li&gt;&lt;li&gt;defining a library that was not registered in &lt;font face="courier new,courier,monospace"&gt;Repository.mk&lt;/font&gt;&lt;/li&gt;&lt;li&gt;unknown platform&lt;/li&gt;&lt;/ul&gt;That is it for this post. The next one will be about issuing  build commands and how the commands in the new build system compare to  those in the old build.pl/dmake combination.&lt;br /&gt;&lt;br /&gt;(This is a very raw mirror of the original blog post made to blogs.sun.com  on 21 Dec 2010. As per &lt;a href="http://web.archive.org/web/20090627144253/http://www.sun.com/termsofuse.jsp" rel="nofollow"&gt;http://web.archive.org/web/2009062714425&lt;wbr&gt;&lt;/wbr&gt;3/http://www.sun.com/termsofuse.jsp &lt;/a&gt;   &amp;quot;... You grant Sun and all other users of the Website an irrevocable,   worldwide, royalty-free, nonexclusive license to use, reproduce,  modify,  distribute, transmit, display, perform, adapt, resell and  publish such  Content (including in digital form) ...&amp;quot; )</event>
<security>public</security>
<allowmask>0</allowmask>
<current_music/>
<current_mood/>
</entry>
<entry>
<itemid>3188</itemid>
<eventtime>2011-07-26 10:30:00</eventtime>
<logtime>2011-07-26 08:30:12</logtime>
<subject>gbuild: Meet the new boss (Same as the old boss)</subject>
<event>&lt;blockquote&gt;&lt;i&gt;This is the fifth post in a short series of blog posts about the new GNU  make based build system that was integrated into the m96 milestone of the DEV300  codeline. It is covering gbuild commands and usage.&lt;/i&gt;&lt;br /&gt;&lt;/blockquote&gt;    &lt;p&gt;Welcome back to the&amp;nbsp;little blog series about the new GNU make build system. After showing off &lt;a href="http://planets.sun.com/GullFOSS/entry/gbuild_eyecandy_for_developers"&gt;some ANSI color eyecandy&lt;/a&gt;  for the new build system it is time to have a look at the new build  system and how to command it in the usual usecases (all commands assume  the shell to be in root directory of the module in question, if no  explicit cd command is given):&lt;/p&gt;    &lt;p&gt;&amp;nbsp;&lt;/p&gt;    &lt;table cellspacing="0" cellpadding="1" border="0" style="width: 100%; background-color: rgb(153, 153, 204);" class=" htmtableborders"&gt;      &lt;tbody&gt;        &lt;tr&gt;          &lt;td align="center" style="width: 25%; background-color: rgb(102, 102, 153);"&gt;build.pl/dmake&lt;/td&gt;          &lt;td align="center" style="width: 25%; background-color: rgb(102, 102, 153);"&gt;GNU make build system&lt;/td&gt;          &lt;td align="center" style="width: 25%; background-color: rgb(102, 102, 153);"&gt;description&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%;"&gt;&lt;font face="courier new,courier,monospace"&gt;build &amp;amp;&amp;amp; deliver&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;          &lt;td style="width: 25%;"&gt;&lt;font face="courier new,courier,monospace"&gt;make -sr&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;          &lt;td style="width: 25%;"&gt;builds the current module&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font face="courier new,courier,monospace"&gt;deliver -undeliver &amp;amp;&amp;amp; rm -rf $PLATFORM&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;          &lt;td style="width: 25%; background-color: rgb(204, 204, 255);"&gt;&lt;font face="courier new,courier,monospace"&gt;make -sr clean&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;          &lt;td style="width: 25%; background-color: rgb(204, 204, 255);"&gt;clears the module from the $OUTDIR (solver) and clears local build directories&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td valign="top"&gt;&lt;font face="courier new,courier,monospace"&gt;build --all &amp;amp;&amp;amp; deliver&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;          &lt;td valign="top"&gt;&lt;font face="courier new,courier,monospace"&gt;build --all &lt;br /&gt;&lt;/font&gt;&lt;/td&gt;          &lt;td valign="top"&gt;&amp;nbsp;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td valign="top" style="background-color: rgb(204, 204, 255);"&gt;&lt;font face="courier new,courier,monospace"&gt;cd instsetoo_native &amp;amp;&amp;amp; build --all&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;          &lt;td valign="top" style="background-color: rgb(204, 204, 255);"&gt;&lt;font face="courier new,courier,monospace"&gt;cd $SRC_ROOT &amp;amp;&amp;amp; make -sr&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;          &lt;td valign="top" style="background-color: rgb(204, 204, 255);"&gt;builds all&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;          &lt;td style="vertical-align: top;"&gt;&lt;font face="courier new,courier,monospace"&gt;cd instsetoo_native &amp;amp;&amp;amp; build --prepare --from sal&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;          &lt;td style="vertical-align: top;"&gt;&lt;font face="courier new,courier,monospace"&gt;cd $SRC_ROOT &amp;amp;&amp;amp; make -sr clean&lt;br /&gt;&lt;/font&gt;&lt;/td&gt;          &lt;td style="vertical-align: top;"&gt;clears all modules and all local build directories&lt;/td&gt;        &lt;/tr&gt;      &lt;/tbody&gt;    &lt;/table&gt;    &lt;p&gt;&lt;br /&gt;Some things changed from the old build system. Here is an overview:&lt;/p&gt;    &lt;h5&gt;no local output tree&lt;/h5&gt;    &lt;p&gt;The GNU make build system does not use a &amp;quot;local module output directory&amp;quot;. All modules use a &lt;font face="courier new,courier,monospace"&gt;$WORKDIR&lt;/font&gt; (by default a directory named &amp;quot;workdir&amp;quot; in the platform directory in the &lt;font face="courier new,courier,monospace"&gt;$OUTDIR&lt;/font&gt;/solver) for intermediate files. This makes the source tree read-only for the migrated modules.&lt;/p&gt;    &lt;h5&gt;cleaning up of modules&lt;/h5&gt;    &lt;p&gt;&lt;font face="courier new,courier,monospace"&gt;build --prepare&lt;/font&gt; will not clear the &lt;font face="courier new,courier,monospace"&gt;$WORKDIR&lt;/font&gt; of files by migrated modules. However, calling &lt;font face="courier new,courier,monospace"&gt;make -sr clean&lt;/font&gt; in the module or in the &lt;font face="courier new,courier,monospace"&gt;$SRC_ROOT&lt;/font&gt; will.&lt;/p&gt;    &lt;h5&gt;current directory when starting make&lt;/h5&gt;    &lt;p&gt;Other than build.pl, one can not call &lt;font face="courier new,courier,monospace"&gt;make&lt;/font&gt; in any subdirectory  to build the module. Either, one has to &lt;font face="courier new,courier,monospace"&gt;cd&lt;/font&gt; to the module root before  calling make, or one has to explicitly give the makefile in the module  root to the make command: &lt;font face="courier new,courier,monospace"&gt;cd sw/source/core &amp;amp;&amp;amp; make -srf  ../../Makefile&lt;/font&gt;.&lt;/p&gt;    &lt;h5&gt;changes in parallelization&lt;/h5&gt;    &lt;p&gt;The old build system used one dmake process per directory, while the new  one is hooked into build.pl as one make process per module for now. Big modules like sw only  use the parallelization by the second -P switch given to the build --all  command. As more and more modules get migrated the second -P switch in a  &lt;font face="courier new,courier,monospace"&gt;build --all -P4 -- -P4&lt;/font&gt;  command will get more important. In the end -- after getting rid of  build.pl -- only one make process will be used for the whole build and  the maximum number of jobs will be given to via the &lt;font face="courier new,courier,monospace"&gt;-j&lt;/font&gt; switch, thus eliminating the need for guesswork on how to distribute the parallelization over the two old systems.&lt;/p&gt;    &lt;p&gt;&amp;nbsp;&lt;/p&gt;    &lt;h5&gt;precompiled debug headers&lt;/h5&gt;    &lt;p&gt;On Windows support for precompiled headers is also available on debug  builds, resulting for example in a speedup of ~40% for an build of  module sw for debug builds.&lt;/p&gt;    &lt;p&gt;&amp;nbsp;&lt;/p&gt;    &lt;h5&gt;no seperation of build and deliver&lt;/h5&gt;    &lt;p&gt;The new build system does not separate the build and deliver steps  of a module. Since libraries are always linked against the solver/&lt;font face="courier new,courier,monospace"&gt;$OUTDIR&lt;/font&gt;  this means that in module framework, where the library fwk is linking  against the library fwi, the library fwi will be copied to the solver/&lt;font face="courier new,courier,monospace"&gt;$OUTDIR&lt;/font&gt;  before linking the library fwk. This lifts the artificial dependency  barriers introduced by modules, but also results in that building a  module always modifies the solver/&lt;font face="courier new,courier,monospace"&gt;$OUTDIR&lt;/font&gt;. It also avoids the confusion of building a module, but forgetting to deliver it.&lt;/p&gt;    &lt;h5&gt;no local module builds&lt;/h5&gt;    &lt;p&gt;One can not simply copy a module to &amp;quot;anywhere&amp;quot; and build it there.  The build system will notice this and will bail out. And even when it  would not bail out, it would ignore the copied module for anything but  the makefiles. It would still look for the files to build and to compile  in the directories given in the variable &lt;font face="courier new,courier,monospace"&gt;$gb_REPOS&lt;/font&gt; as described in the post about multiple repository support.&lt;/p&gt;    &lt;p&gt;To provide a workaround for the rare usecase that one wants to  build only one module with some quick or risky changes without changing  the solver, there is a setuplocal target available in gbuild. For example to do experimental stuff on the tools module one would:&lt;/p&gt;    &lt;blockquote&gt;      &lt;p&gt;&lt;font face="courier new,courier,monospace"&gt;export gb_LOCALBUILDDIR=/tmp/myoootoolsexperiment&lt;/font&gt;&lt;/p&gt;      &lt;p&gt;&lt;font face="courier new,courier,monospace"&gt;cd tools&lt;/font&gt;&lt;/p&gt;      &lt;p&gt;&lt;font face="courier new,courier,monospace"&gt;make setuplocal # this  will create a copy of the tools module and the solver at  $gb_LOCALBUILDDIR and tune the build system to that location&lt;br /&gt;&lt;/font&gt;&lt;/p&gt;      &lt;p&gt;&lt;font face="courier new,courier,monospace"&gt;cd /tmp/myoootoolsexperiment/srcdir/tools&lt;/font&gt;&lt;/p&gt;      &lt;p&gt;&lt;font face="courier new,courier,monospace"&gt;# hack away&lt;/font&gt;&lt;/p&gt;      &lt;p&gt;&lt;font face="courier new,courier,monospace"&gt;cd $SRC_ROOT/tools&lt;/font&gt;&lt;/p&gt;      &lt;p&gt;&lt;font face="courier new,courier,monospace"&gt;make removelocal # clears $gb_LOCALBUILDDIR and allows work directly on the source&lt;/font&gt;&lt;/p&gt;    &lt;/blockquote&gt;    &lt;p&gt;This is an extension to the gbuild system (because it relies on rsync, which the gbuild core itself should not do) and thus can be found in &lt;a href="http://hg.services.openoffice.org/cws/gnumake2/file/2b1c7f39e6d4/solenv/gbuild/extensions/SetupLocal.mk"&gt;the extensions directory of the build system&lt;/a&gt;.&lt;/p&gt;    &lt;h5&gt;full dependencies&lt;/h5&gt;    &lt;p&gt;Migrated modules always have full dependencies thus changing one  header in a low level module will trigger a rebuild of all objects using  that header. On Windows that means all headers except compiler headers  and headers from platform, directx and Java SDK, on the other platforms  it means all headers.&lt;/p&gt;    &lt;h5&gt;Faster no-op builds&lt;/h5&gt;    Checking that nothing (or almost nothing) needs to be rebuild is  faster. On a sample system (Notebook with Core2Duo, 2 GHz) on Windows XP  (anti virus software installed), rechecking that nothing needs to be  done for module sw takes 7 sec with a warm cache. On the same machine  build.pl/dmake took 210 sec with the same &amp;quot;full&amp;quot; header dependencies.&lt;br /&gt;&lt;br /&gt;(This is a very raw mirror of the original blog post made to blogs.sun.com  on 21 Dec 2010. As per &lt;a href="http://web.archive.org/web/20090627144253/http://www.sun.com/termsofuse.jsp" rel="nofollow"&gt;http://web.archive.org/web/2009062714425&lt;wbr&gt;&lt;/wbr&gt;3/http://www.sun.com/termsofuse.jsp &lt;/a&gt;   &amp;quot;... You grant Sun and all other users of the Website an irrevocable,   worldwide, royalty-free, nonexclusive license to use, reproduce,  modify,  distribute, transmit, display, perform, adapt, resell and  publish such  Content (including in digital form) ...&amp;quot; )</event>
<security>public</security>
<allowmask>0</allowmask>
<current_music/>
<current_mood/>
</entry>
<entry>
<itemid>3571</itemid>
<eventtime>2011-07-26 10:34:00</eventtime>
<logtime>2011-07-26 08:54:10</logtime>
<subject>old gbuild blog posts</subject>
<event>Since blogs.sun.com/gullFOSS went offline a while ago, some of my blog posts about the new gbuild build system are not available anymore. I mirror those posts here now for that reason. They might be outdated (after all the world is moving quite fast at LibreOffice) and contain broken links, but still might help explain some of the insane design decisions made with gbuild.&lt;br /&gt;&lt;br /&gt;Here they are:&lt;ul&gt;&lt;li&gt;&lt;a href="http://sweetshark.livejournal.com/2517.html"&gt;gbuild: To boldly go where no build system has gone before ...&lt;/a&gt;&lt;/li&gt;&lt;li&gt;gbuild: How to migrate a module (currently no copy of the original post available, but there is an &lt;a href="http://wiki.services.openoffice.org/wiki/Build_Environment_Effort/Module_Migration"&gt;modified version&lt;/a&gt; currently still available)&lt;/li&gt;&lt;li&gt;&lt;a href="http://sweetshark.livejournal.com/2801.html"&gt;gbuild: How to setup a repository&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://sweetshark.livejournal.com/2865.html"&gt;gbuild: Eyecandy for developers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://sweetshark.livejournal.com/3188.html"&gt;gbuild: Meet the new boss (Same as the old boss)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;The posts themselves are untagged as to not spam the planets with old content.</event>
<security>public</security>
<allowmask>0</allowmask>
<current_music/>
<current_mood/>
</entry>
<entry>
<itemid>3677</itemid>
<eventtime>2011-07-27 19:53:00</eventtime>
<logtime>2011-07-27 17:53:44</logtime>
<subject>personal commit stats</subject>
<event>Since the release of 3.4.2 (which will be included in Ubuntu Oneiric) is around the corner and I will be soon go on vacation I thought it might be a good time to take look at how I am doing contribution wise. Using the totally unscientific method of commit counting, I came up with the following numbers.&lt;br /&gt;Of all the changes to master since February 1st, 2011 (the day I joined Canonical), I commited 561. Their authorship is:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;326 by Bjoern Michaelsen (yours truely)&lt;/li&gt;&lt;li&gt;103 by Michael Stahl&lt;/li&gt;&lt;li&gt;59 by Mathias Bauer&lt;/li&gt;&lt;li&gt;31 by Henning Brinkmann&lt;/li&gt;&lt;li&gt;15 by Phillip Lohmann&lt;/li&gt;&lt;li&gt;10 by Ocke Jansen&lt;/li&gt;&lt;li&gt;4 by Ivo Hinkelmann&lt;/li&gt;&lt;li&gt;3 by Daniel Rentz&lt;/li&gt;&lt;li&gt;2 by Mat&amp;uacute;&amp;scaron; Kukan&lt;/li&gt;&lt;li&gt;1 by Alberto Ruiz, Andras Timar, Eric Bachard, Jani Monoses, Matthias Klose, Michael Meeks, Sergey Davidoff and Xisco Fauli each&lt;/li&gt;&lt;/ul&gt;In addition Michael Meeks and Fridrich &amp;Scaron;trba each commited one of my changesets. So in total I had some role in 563 of the 11.756 changes done to master in the given timeframe -- or about 4.8%.&lt;br /&gt;Just counting self-authored and self-commited changesets, my 326 were outperformed by:&lt;ul&gt;&lt;li&gt;Fridrich &amp;Scaron;trba (330)&lt;/li&gt;&lt;li&gt;David Tardon (406)&lt;/li&gt;&lt;li&gt;Miklos Vajna (407)&lt;/li&gt;&lt;li&gt;Petr Mladek (415)&lt;/li&gt;&lt;li&gt;Kohei Yoshida (500)&lt;/li&gt;&lt;li&gt;Thomas Arnhold (634)&lt;/li&gt;&lt;li&gt;Tor Lillqvist (1014)&lt;/li&gt;&lt;li&gt;and our absolute rockstar Caol&amp;aacute;n McNamara with 1865 commits.&lt;/li&gt;&lt;/ul&gt;Congratulations and a big thank you to all of you!</event>
<security>public</security>
<allowmask>0</allowmask>
<current_music/>
<current_mood/>
</entry>
</livejournal>